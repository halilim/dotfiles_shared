#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

ifconfig_output=$(ifconfig)
routed_interface=$(route get 1.1.1.1 | rg -oU 'interface:\s*(\S+)' -r '$1')

# From network_switcher
networks=$(networksetup -listnetworkserviceorder | tail -n +2)
# Loop over networks instead of ifconfig lines to get the correct order (i.e. the active network first)
while [ "$networks" != '' ]; do
  networks="${networks#*\(}"  # '*) Service 1\n...'
  number=${networks%%\)*}     # '*'
  networks="${networks#*\) }" # 'Service 1\n...'
  name=${networks%%$'\n'*}    # 'Service 1'

  networks="${networks#*$'\n'*Device: }" # 'en0)\n...'
  device=${networks%%\)*}                # 'en0'
  networks="${networks#*\)}"             # '' (tail call for the final network, since there's no \n\n anymore)
  networks="${networks#*$'\n\n'}"        # '(2) Service 2\n...'

  [[ $number == '*' || ! $device ]] && continue

  ifconfig_section=$(echo "$ifconfig_output" |
    rg --multiline --multiline-dotall --only-matching "$device:\s(.*?)\n(\S+|\z)" -r '$1')
  [[ ! $ifconfig_section ]] && continue

  [[ $name == *Wi-Fi* ]] && name="$name$(networksetup -getairportnetwork "$device" | cut -d : -f 2)"

  #  `	inet 192.168.0.0 netmask ...`
  ipv4=$(echo "$ifconfig_section" | rg --only-matching '^\s+inet\s+(\S+)' -r '$1')

  #  `	inet6 fe80::849:b297:d27a:6369%en0 prefixlen ...`
  ipv6=$(echo "$ifconfig_section" | rg --only-matching '^\s+inet6\s+(\S+)' -r '$1')
  ipv6="${ipv6%%%*}" # Remove %en0

  # https://www.nerdfonts.com/cheat-sheet
  case $name in
    *\ LAN | *\ ethernet) icon=󰈀 router_icon=󱂇 ;;
    *Wi-Fi*) icon= router_icon=󰑩 ;;
  esac

  echo "$icon $device $name$([[ $device == "$routed_interface" ]] && echo " (routed)")"
  echo "$router_icon $ipv4 / $ipv6"
  # TODO: might cache proxies, see my_external_ip
  echo " $(dig @ns1.google.com TXT o-o.myaddr.l.google.com +short -b "$ipv4" | tr -d '"')"
  printf '\n'
done
