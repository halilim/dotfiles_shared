#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Tries to be as idempotent as possible
# Doesn't handle deletions

function setup() {
  local candidate
  for candidate in code-insiders code vim; do
    if command -v $candidate > /dev/null 2>&1; then
      break
    fi
  done

  export EDITOR=$candidate
  export BUNDLER_EDITOR=$candidate
  export VISUAL='vim' # Needed for `crontab -e` (`code --wait` doesn't work)

  local vars=(
    EDITOR
    BUNDLER_EDITOR
    VISUAL
    DOTFILES
    DOTFILES_SHARED
    DOTFILES_INCLUDES
    DOTFILES_CUSTOM
  )

  local bootstrap='' var
  for var in "${vars[@]}"; do
    bootstrap+="$(declare -p "$var")"$'\n'
  done
  echo_eval 'echo %q > %q/.dotfiles_bootstrap.sh' "$bootstrap" "$HOME"

  local plug=$HOME/.vim/autoload/plug.vim plug_installed=true
  if [[ ! -f $plug ]]; then
    echo_eval 'curl -fLo %q --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ' "$plug"
    plug_installed=false
  fi

  sync all $plug_installed

  if [[ $OSTYPE == darwin* && -n "${ZSH_VERSION:-}" ]]; then
    echo_eval '%q/bin/iterm_tab %q omz_install_custom' "$HOME" "$PWD"
  fi
}

# TODO: Add archive feature: unarchive when the app is installed again
function sync() {
  local type=${1:-all} plug_installed=${2:-true}

  if [[ $type == all || $type == shared ]]; then
    setup_shared_links
  fi

  if [[ $type == all || $type == custom ]]; then
    setup_custom_links
  fi

  vim_mk_spell false "$plug_installed"
}

function import() {
  do_import "$@"
}

function revert_import() {
  REVERT_IMPORT=1 do_import "$@"
}

function do_import() {
  local usage
  usage="$USAGE_BASE ${FUNCNAME[1]} <shared|custom> <path 1> [<path 2> ...]"

  local dotfile_type=${1:-''}
  if [[ $dotfile_type != shared && $dotfile_type != custom ]]; then
    if [[ $dotfile_type ]]; then
      log_error 'Unknown dotfile type'
    fi

    log_error "$usage" 1
    return
  fi

  if [[ $# -lt 2 ]]; then
    log_error "$usage" 1
    return
  fi

  local msg_type msg_home
  msg_type=$(color red "$dotfile_type")
  msg_home=$(color green "$HOME")
  if [[ ${REVERT_IMPORT:-''} ]]; then
    echo "Reverting: { $msg_type dotfiles -> $msg_home }"
  else
    echo "Importing: { $msg_home -> $msg_type dotfiles }"
  fi

  for item_path in "${@:2}"; do
    import_path "$dotfile_type" "$item_path"
  done
}

function import_path() {
  local dotfile_type=$1 item_path=$2 revert=${REVERT_IMPORT:-''}

  if [[ ! $revert && ! -e $item_path ]]; then
    log_error 'Does not exist'
    return
  fi

  local relative_path
  relative_path=$(relative_to "$HOME" "$item_path")

  local dotfile_dir
  case "$dotfile_type" in
    shared) dotfile_dir=$DOTFILES_SHARED ;;
    custom) dotfile_dir=$DOTFILES_CUSTOM ;;
  esac

  local path_in_dotfiles=$dotfile_dir/link_home/$relative_path

  # Git doesn't allow sym-linked .gitignore files, so we link .git/info/exclude instead
  # But .git is a special name that is always ignored, so we rename it within dotfiles
  # https://stackoverflow.com/q/72729555/25475271
  local is_local_git=false
  [[ $item_path == .git/* || $item_path == */.git/* ]] && is_local_git=true
  [[ $is_local_git ]] && path_in_dotfiles=${path_in_dotfiles//\/.git\//\/.git.linked\/}

  if [[ $revert ]]; then
    if [[ ! -e $path_in_dotfiles ]]; then
      log_error 'Does not exist in dotfiles'
      return
    fi

    [[ -e $item_path && ! -L $item_path || $(readlink -f "$item_path") != "$path_in_dotfiles" ]] && backup "$item_path" home

    echo_eval_with_sudo home 'mv %q %q' "$path_in_dotfiles" "$item_path"
  else
    local relative_dir=${relative_path%/*}
    [[ $is_local_git ]] && relative_dir=${relative_dir//\/.git\//\/.git.linked\/}
    [[ $relative_dir == "$relative_path" ]] && relative_dir=''
    mk_dir "$dotfile_dir/link_home/$relative_dir"
    echo_eval_with_sudo home 'mv %q %q' "$item_path" "$path_in_dotfiles"

    case "$dotfile_type" in
      shared) setup_shared_links ;;
      custom) setup_custom_links ;;
    esac

    [[ $item_path == $VIM_SPELL/* ]] && vim_mk_spell
  fi

  return 0
}

function setup_shared_links() {
  setup_links "$DOTFILES_SHARED"
}

function setup_custom_links() {
  if [[ -d "$DOTFILES_CUSTOM" ]]; then
    setup_links "$DOTFILES_CUSTOM"
  fi
}

function setup_links() {
  start_link_recursive "$1"/link_home home
  start_link_recursive "$1"/link/root root
}

function start_link_recursive() {
  local dir=$1 type=$2
  if [[ ! -d "$dir" ]]; then
    return 0
  fi
  link_recursive "$dir" "$dir" "$type"
}

function link_recursive() {
  RECURSION_LEVEL=${RECURSION_LEVEL:-0}
  RECURSION_LEVEL=$((RECURSION_LEVEL + 1))
  if [[ $RECURSION_LEVEL -gt 10 ]]; then
    log_error 'Too many levels of recursion'
    return
  fi

  local current_source_dir=$1 source_base=$2 type=$3 relative_base target_base target_base_name target_dir
  relative_base=$(relative_to "$source_base" "$current_source_dir")

  [[ -L "$current_source_dir" ]] && current_source_dir=$(readlink -f "$current_source_dir")

  case "$relative_base" in
    .) relative_base='' ;;
    */.git.linked*) relative_base=${relative_base/.git.linked/.git} ;;
  esac

  case "$type" in
    home)
      target_base=$HOME
      target_base_name=$HOME
      ;;
    root)
      target_base=/
      target_base_name=''
      ;;
    *)
      log_error "Unknown link type: $type"
      return
      ;;
  esac

  target_dir=$target_base
  [[ $relative_base ]] && target_dir=$target_base_name/$relative_base

  if [[ $current_source_dir != "$source_base" ]]; then
    mk_dir "$target_dir" "$type"
  fi

  local dir_source
  # shellcheck disable=SC2044
  for dir_source in $(find_immediate_children "$current_source_dir" d); do
    RECURSION_LEVEL=$RECURSION_LEVEL link_recursive "$dir_source" "$source_base" "$type"
  done

  local file_source
  # shellcheck disable=SC2044
  for file_source in $(find_immediate_children "$current_source_dir" f); do
    link_file "$file_source" "$target_dir" "$type"
  done

  local link_source
  # shellcheck disable=SC2044
  for link_source in $(find_immediate_children "$current_source_dir" l); do
    if [[ -d $(readlink -f "$link_source") ]]; then
      RECURSION_LEVEL=$RECURSION_LEVEL link_recursive "$link_source" "$source_base" "$type"
    else
      link_file "$link_source" "$target_dir" "$type"
    fi
  done
}

function relative_to() {
  $GNU_REALPATH -s --relative-to="$1" "$2"
}

function mk_dir() {
  local dir=$1
  [[ -d "$dir" || $dir == / || $dir == "$HOME" ]] && return 0

  local type=${2:-home}
  [[ -L "$dir" || -f "$dir" ]] && backup "$dir" "$type"
  echo_eval_with_sudo "$type" 'mkdir -p %q' "$dir"
}

function find_immediate_children() {
  local dir=$1 type=$2
  find "$dir" -mindepth 1 -maxdepth 1 -type "$type"
}

function link_file() {
  local source=$1 target_dir=$2 type=$3 source_base
  source_base=$(basename "$source")
  [[ $source_base == '.DS_Store' ]] && return 0

  # TODO: Remove hardlink-ing, it's unreliable. Backup instead
  # TODO: Or create structure: {link,hardlink}/{home,root} (& mac/linux?)
  # TODO: Move iTerm2 config to default location
  # macOS no longer accepts symlinks to plist files https://github.com/lra/mackup/issues/1924
  # So for now, we use hard links. Note that they are prone to being replaced by actual files.
  local hard_link=false
  [[ $source == *.plist ]] && hard_link=true

  local target=$target_dir/$source_base

  need_to_link "$source" "$target" "$hard_link" || return 0

  backup "$target" "$type" "$hard_link" "$source"

  local link_arg=' -s' comment=''
  [[ $hard_link == true ]] && link_arg=' -f' && comment=' # Hard link'

  echo_eval_with_sudo "$type" 'ln%s %q %q%s' "$link_arg" "$source" "$target" "$comment"
}

function need_to_link() {
  local source=$1 target=$2 hard_link=$3

  [[ -e $target ]] || return 0

  if [[ $hard_link == false ]]; then
    [[ $(readlink -f "$target") != $(readlink -f "$source") ]]
  else
    if same_inode "$target" "$source"; then
      return 1
    fi
  fi
}

function backup() {
  local target=$1 type=$2 hard_link=${3:-false} source=${4:-}

  [[ ! -L "$target" && ! -f "$target" && ! -d "$target" || $target == / || $target == "$HOME" ]] && return 0

  [[ -L "$target" && ! -e "$target" ]] && echo_eval_with_sudo "$type" 'rm %q # Broken link' "$target" && return

  if [[ $hard_link == true ]]; then
    if [[ $source ]]; then
      echo_eval_with_sudo "$type" 'cp -f %q %q' "$target" "$source"
    fi
  else
    echo_eval_with_sudo "$type" 'mv %q{,.bak.%q}' "$target" "$(date +'%s')"
  fi
}

function echo_eval_with_sudo() {
  local type=$1
  shift
  cmd=("$@")
  # NOTE: If this gets migrated to Zsh, change 0 to 1
  [[ "$type" == 'root' ]] && cmd[0]="sudo ${cmd[0]}"
  echo_eval "${cmd[@]}"
}

function vim_mk_spell() {
  if ! command -v "$VIM" &> /dev/null || [[ ${NO_VIM:-} || ! -d "$VIM_SPELL" ]]; then
    return 0
  fi

  # TODO: Replace plug_installed and vim_cmd_pre with vim_cmds
  # TODO: Is this the correct process, or should multiple files for a locale be merged? Check Vim
  local force=${1:-false} plug_installed=${2:-true} file files=()
  for file in "$VIM_SPELL"/*.add; do
    [[ $force == true || ! $(find "$VIM_SPELL" -name "$(basename "$file")*.spl" -print -quit) ]] && files+=("$file")
  done

  local num_files=${#files[@]}
  [[ $num_files -eq 0 ]] && return 0

  local vim_cmd_pre=''
  if [[ $plug_installed == false ]]; then
    vim_cmd_pre='PlugInstall | '
  fi
  echo_eval "vim +'$vim_cmd_pre$(printf 'mkspell! %%q | %.0s' $(seq 1 "$num_files"))q'" "${files[@]}"
}

function log_error {
  local msg=$1 no_color=${2:-''}
  if [[ $no_color ]]; then
    echo >&2 "$msg"
  else
    color red "$msg" >&2
  fi
  return 1
}

export DOTFILES_CMD
DOTFILES_CMD=$(basename "$0")

export VIM_SPELL=$HOME/.vim/spell

export DOTFILES
DOTFILES="$(dirname "$(dirname "$(dirname "$(dirname "$(realpath "$0")")")")")"
export DOTFILES_SHARED=$DOTFILES/shared
export DOTFILES_INCLUDES=$DOTFILES_SHARED/includes
export DOTFILES_CUSTOM=$DOTFILES/custom

# TODO: Change with minimal dependencies
# shellcheck disable=SC1091
# . "$DOTFILES_INCLUDES"/bash_shared.sh
# shellcheck disable=SC1091
. "$DOTFILES_INCLUDES"/lib/functions.sh
# shellcheck disable=SC1091
. "$DOTFILES_INCLUDES"/env.sh

USAGE_BASE="Usage: $(color green "$DOTFILES_CMD")"

# TODO: Add rm command: removes both the file and the symlink
case "${1:-''}" in
  setup) setup ;;
  sync) sync "${2:-}" ;;
  import) import "${@:2}" ;;
  revert_import) revert_import "${@:2}" ;;
  vim_mk_spell) vim_mk_spell true ;;
  *) log_error "$USAGE_BASE <setup|sync|import|vim_mk_spell> ..." 1 ;;
esac
