{
	"1>&2 (stdout->stderr, e.g. capture nothing)": {
		"prefix": "12",
		"body": "1>&2"
	},

	"2>&1 (stderr->stdout, e.g. capture both)": {
		"prefix": "21",
		"body": "2>&1"
	},

	"> /dev/null 2>&1 (stderr->stdout & ignore both)": {
		"prefix": "21n",
		"body": "> /dev/null 2>&1"
	},

	"2> /dev/null (ignore stderr)": {
		"prefix": "2n",
		"body": "2> /dev/null"
	},

	"zsh/bash array": {
		"prefix": "a",
		"body": [
			"${1:VAR_NAME}=(",
				"\t$0",
			")"
		],
	},

	// bash: 0-indexed; zsh: 1-indexed - https://stackoverflow.com/q/50427449/372654
	"array element access": {
		"prefix": "ae",
		"body": [
			"\"${${1:ARR_NAME}[*]:${2:offset}:${3:length}}\"",
		],
	},

	"array element set": {
		"prefix": "aes",
		"body": [
			"${1:arr}[ARRAY_START+${2:0-based index}]=${0:value}"
		],
	},

	"alias": {
		"prefix": "al",
		"body": "alias ${1:name}='$0'",
	},

	"global alias": {
		"prefix": "alg",
		"body": "alias -g ${1:name}='$0'",
	},

	"convert to lower case": {
		"prefix": ["case_l", "downcase"],
		"body": [
			"| tr '[:upper:]' '[:lower:]'"
		],
	},

	"convert to upper case": {
		"prefix": ["case_u", "upcase"],
		"body": [
			"| tr '[:lower:]' '[:upper:]'"
		],
	},

	// cd already emits error with folder name, and exit & return defaults to last command's exit code

	"cd or exit (within a script)": {
		"prefix": "cde",
		"body": "cd '$0' || exit"
	},

	"cd or return (within a function)": {
		"prefix": "cdr",
		"body": "cd '$0' || return"
	},

	"color": {
		"prefix": "color",
		"body": [
			"# ${1|regular (0),bold (1)|} ${2|black (30),red (31),green (32),yellow (33),blue (34),magenta (35),cyan (36),white (37)|}",
			"printf '\\e[${1/[^0-9]//gi};${2/[^0-9]//gi}m%s\\e[0m' \"$0\""
		],
	},

	"declare -p": {
		"prefix": "dp",
		"body": [
			"declare -p $0 1>&2"
		],
	},

	"dynamic variable name (Bash: !, Zsh: (P))": {
		"prefix": "dv",
		"body": [
			"\\${${1|!,(P)|}${0:name}:-}"
		],
	},

	// https://stackoverflow.com/a/16491478/372654
	"do while (emulate)": {
		"prefix": ["dow", "dw"],
		"body": [
			"while",
				"\t$0 # Do some stuff",
				"\t\\$x == 'y' # Conditions",
			"do",
				"\t:",
			"done"
		],
	},

	"echo": {
		"prefix": ["e", "ek"],
		"body": [
			"echo $0"
		],
	},

	"echo >&2": {
		"prefix": "e2",
		"body": [
			"echo >&2 $0"
		],
	},

	// https://stackoverflow.com/a/12451419/25475271
	"echo and capture": {
		"prefix": "ec",
		"body": [
			"exec 5>&1",
			"local ${1:output}",
			"$1=$(${2:cmd} 2>&1 | tee >(cat - >&5))",
			"exec 5>&-"
		],
	},

	"echo error return (functions)": {
		"prefix": "eer",
		"body": [
			"echo >&2 '${1:error message}'",
			"return ${2:1}"
		],
	},

	"echo error exit (scripts)": {
		"prefix": "eex",
		"body": [
			"echo >&2 '${1:error message}'",
			"exit ${2:1}"
		],
	},

	"echo_eval": {
		"prefix": "ee",
		"body": "echo_eval '${1:foo %q}' \"$${2:bar}\"",
	},

	"echo_eval with heredoc": {
		"prefix": "eeh",
		"body": [
			"echo_eval \"$(cat <<SH",
				"\t${1:foo %q}",
			"SH",
			")\" \"$${2:bar}\""
		],
	},

	"echo_eval no dry-run": {
		"prefix": "eend", // cSpell:ignore eend
		"body": [
			"DRY_RUN='' echo_eval '${1:foo %q}' \"$${2:bar}\""
		],
	},

	"else": {
		"prefix": "el",
		"body": [
			"else",
				"\t$0"
		],
	},

	"export": {
		"prefix": "ex",
		"body": "export ${1:name}=${2:value}",
	},

	"function name": {
		"prefix": ["fname", "fnm"], // cSpell:ignore fname
		"body": [
			"${funcstack[1]:-${FUNCNAME[0]}}"
		],
	},

	"function": {
		"prefix": ["f", "fn"],
		"body": [
			"function ${1:function_name}() {",
				"\t$0",
			"}"
		]
	},

	// https://github.com/DeepInThought/vscode-shell-snippets/blob/master/snippets/shellscript.json
	// Overridden to add locals - otherwise the iterator variables leak out of functions
	"for i": {
		"prefix": "fori", // cSpell:ignore fori
		"body": [
			"local $0",
			"for ((${0:i} = 0; ${0:i} < ${1:10}; ${0:i}++)); do",
				"\techo \"$${0:i}\"",
			"done"
			],
		"description": "An index-based iteration for loop."
	},
	"for in": {
		"prefix": "forin", // cSpell:ignore forin
		"body": [
			"local $0",
			"for ${0:VAR} in $${1:LIST}; do",
				"\techo \"$${0:VAR}\"",
			"done"
		],
		"description": "for loop in list"
	},

	"for in array": {
		"prefix": "forina", // cSpell:ignore forina
		"body": [
			"local $0",
			"for ${0:VAR} in \"${${1:LIST}[@]}\"; do",
				"\techo \"$${0:VAR}\"",
			"done"
		]
	},

	"for in each directory": {
		"prefix": "forind", // cSpell:ignore forind
		"body": [
			"local dir",
			"for dir in */; do",
				"\t(",
					"\t\tcd_with_header \"\\$dir\"",
					"\t\t$0",
					"\t\tprintf '\\n'",
				"\t)",
			"done"
		],
	},

	"pass heredoc to function": {
		"prefix": "hdc",
		"body": [
			"${1:func} \"$(cat <<${2:HEREDOC}",
				"\t$0",
			"$2",
			")\""
		],
	},

	"heredoc with tab suppression": {
		"prefix": "hs",
		"body": [
			"<<-${1:HEREDOC}",
				"\t$0",
			// "${1/\\A\\s*//g}" - doesn't work, remove preceding whitespace manually
			"$1"
		],
	},

	"if": {
		"prefix": "if",
		"body": [
			"if [[ $1 ]]; then",
				"\t$0",
			"fi"
		],
	},

	"if command": {
		"prefix": "ifc",
		"body": [
			"if ${1:cmd}; then",
				"\t$0",
			"fi"
		],
	},

	// cSpell:ignore ifce
	"if command else": {
		"prefix": "ifce",
		"body": [
			"if ${1:cmd}; then",
				"\t$2",
			"else",
				"\t$0",
			"fi"
		],
	},

	"if command not": {
		"prefix": "ifcn", // cSpell:ignore ifcn
		"body": [
			"if ! ${1:cmd}; then",
				"\t$0",
			"fi"
		],
	},

	"if command exists": {
		"prefix": "ifco", // cSpell:ignore ifco
		"body": [
			"if command -v ${1:cmd}; then",
				"\t$0",
			"fi"
		],
	},

	"if DRY_RUN": {
		"prefix": "ifd",
		"body": [
			"if [[ \\$DRY_RUN ]]; then",
				"\t$1",
			"else",
				"\t$2",
			"fi"
		],
	},

	// cSpell:ignore ife
	"if else": {
		"prefix": "ife",
		"body": [
			"if [[ $1 ]]; then",
				"\t$2",
			"else",
				"\t$0",
			"fi"
		],
	},

	"if interactive": {
		"prefix": "ifi",
		"body": [
			"if [[ $- = *i* ]]; then",
				"\t$0",
			"fi"
		],
	},

	"if value in array": {
		"prefix": "ifia", // cSpell:ignore ifia
		"body": [
			"# shellcheck disable=SC2199,SC2076",
			// " ${arr[@]} " =~ " $val " returns false positives with spaces
			// e.g. true for arr=(foo 'bar baz') val=bar
			"if in_array \"\\$${2:value}\" \"\\${${1:ARRAY}[@]}\"; then",
				"\t$0",
			"fi"
		],
	},

	"if not": {
		"prefix": "ifn",
		"body": [
			"if [[ ! $1 ]]; then",
				"\t$0",
			"fi"
		],
	},

	"if starts with": {
		"prefix": "ifs",
		"body": [
			"if [[ ${1:var} == '${2:str}'* ]]; then",
				"\t$0",
			"fi"
		],
	},

	"if ZSH": {
		"prefix": "ifz",
		"body": [
			"if [ -n \"\\${ZSH_VERSION:-}\" ]; then",
				"\t$1",
			"else",
				"\t$2",
			"fi"
		],
	},

	"local var": {
		"prefix": "lo",
		"body": [
			"local ${1:name}=${0:\\$1}"
		],
	},

	"printf": {
		"prefix": "p",
		"body": "printf $0",
	},

	"printf >&2": {
		"prefix": "p2",
		"body": [
			"printf >&2 $0"
		],
	},

	// https://stackoverflow.com/a/32931403/372654
	"read into array": {
		"prefix": "ra",
		"body": [
			"local ${1:array}=()",
			"IFS=\\$'\\n' \"\\${READ_ARRAY[@]}\" -d '' $1 < <( ${0:command} && printf '\\0' )"
		],
	},

	"read into array Bash": {
		"prefix": "rab",
		"body": [
			"${1:array}=()",
			"IFS=\\$'\\n' read -ra -d '' $1 < <( ${0:command} && printf '\\0' )"
		],
	},

	"read into array Zsh": {
		"prefix": "raz",
 		"body": [
 			"${1:array}=()",
			"IFS=\\$'\\n' read -rA -d '' $1 < <( ${0:command} && printf '\\0' )"
 		],
 	},

	"safe bash options": {
		"prefix": "safe",
		"body": [
			"#!/usr/bin/env bash",
			"set -eu${1|v,x|}o pipefail",
			"IFS=$'\\n\\t'",
			"\n"
		],
	},

	"# shellcheck disable=...": {
		"prefix": "scd",
		"body": [
			"# shellcheck disable=SC${0:123}"
		],
	},

	"# shellcheck source=...": {
		"prefix": "scs",
		"body": [
			"# shellcheck source=$0"
		],
	},

	"# shellcheck source=/dev/null": {
		"prefix": "scsd", // cSpell:ignore scsd
		"body": [
			"# shellcheck source=/dev/null"
		],
	},

	// cSpell:ignore unalias
	"unalias": {
		"prefix": "una",
		"body": [
			"unalias ${1:alias} 2> /dev/null || true"
		],
	},

	"while line, for each line": {
		"prefix": ["whl", "forinl"], // cSpell:ignore forinl
		"body": [
			"local line",
			"while IFS= read -r line; do",
      	"\t\\$line$0",
			"done < <(printf '%s\\n' \"\\$${1:lines}\")"
		],
	},

	// zsh

	"zsh associative array": {
		"prefix": "aa",
		"body": [
			"declare -A ${1:VAR_NAME}=(",
				"\t[${2:key}]='${3:value}'",
			")"
		],
	},

	// https://zsh.sourceforge.io/Doc/Release/Completion-System.html
	"zsh auto complete": {
		"prefix": "comp",
		"body": [
			"function _${1:function_name}() {",
				"\t# shellcheck disable=SC2034",
				"\tlocal context state state_descr line",
				"\t# shellcheck disable=SC2034",
				"\ttypeset -A opt_args",
				"",
				"\t_arguments '1: :->${2:arg}'",
				"",
				"\t# shellcheck disable=2046",
				"\tcase \\$state in",
					"\t\t$2) compadd $0 ;;",
				"\tesac",
			"}",
			"",
			"compdef _$1 $1"
		],
	},

	"zsh compdef multiple args with a limited set": {
		"prefix": "compa", // cSpell:ignore compa
		"body": [
			"function _${1:function_name}() {",
				"\t# shellcheck disable=SC2034",
				"\tlocal context state state_descr line",
				"\t# shellcheck disable=SC2034",
				"\ttypeset -A opt_args",
				"",
				"\t_arguments '*: :->${2:arg}'",
				"",
				"\t# shellcheck disable=2046",
				"\tcase \\$state in",
					"\t\t$2)",
						"\t\t\tlocal ${2}s=($0) $2 ${2}s_to_complete=()",
						"\t\t\tfor $2 in \"\\${${2}s[@]}\"; do",
							"\t\t\t\t# shellcheck disable=SC2154",
							"\t\t\t\tif ! in_array \"\\$$2\" \"\\${words[@]}\"; then",
								"\t\t\t\t\t${2}s_to_complete+=(\"\\$$2\")",
							"\t\t\t\tfi",
						"\t\t\tdone",
						"\t\t\tcompadd -a ${2}s_to_complete",
						"\t\t\t;;",
				"\tesac",
			"}",
			"",
			"compdef _$1 $1"
		],
	},

	// https://superuser.com/q/737350/59919
	"zsh for in associative": {
		"prefix": "fora",
		"body": [
			// This version breaks shellcheck
			// "local $1",
			// "# shellcheck disable=SC1073",
			// "for ${1:key} ${2:val} in \"\\${(@kv)${3:ASSOC_ARRAY}}\"; do",
			// 	"\t${4:echo \"\\$$1 -> \\$$2\"}$0",
			// "done"
			"local $1",
			"# shellcheck disable=SC2296",
			"for ${1:key} in \\${(@k)${2:ASSOC_ARRAY}}; do",
				"\t${3:echo \"\\$$1 -> \\${$2[\\$$1]\\}\"}$0",
			"done"
		],
	},

	// END: zsh

	// macOS

	"osascript notify": {
		"prefix": "osan", // cSpell:ignore osan
		"body": "osascript -e 'display notification \"$0\"'",
	},

	// END: macOS
}
