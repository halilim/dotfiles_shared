" source ~/.vimrc

" START: depends on .vimrc - toggle based on the sourcing status of .vimrc

set clipboard+=unnamed

set showcmd             " show command in the last line

set hlsearch            " highlight matches
set ignorecase          " case-insensitive search by default
set smartcase           " except when an upper-case letter used in the search
set incsearch           " search as characters are entered

" nmap * <Action>(FindWordAtCaret)
" nmap n <Action>(FindNext)
" nmap N <Action>(FindPrevious)

" END: depends on .vimrc

let mapleader=","

" Plugins
set commentary
set surround

set ideajoin

" For <Action>s: Cmd+Shift+P > IdeaVim: Track Action IDs

" Emulate vim-wordmotion
map <leader>w [w
map <leader>e ]w
map <leader>b [b

map <Leader><space> :nohl<CR>

" TODO: No direct "ConfigureKeymap" action yet
map <Leader>,k <Action>(ChangeKeymap)
map <Leader>,v :e ~/.ideavimrc<CR>

map <Leader>a <Action>(GotoTest)
map <C-J> <Action>(GotoNextError)
map <C-K> <Action>(GotoPreviousError)
" map <leader>c<space> <Plug>(commentary-gcc)
map <Leader>c <Action>(CommentByLineComment)
map <Leader>cp :call CopyGitPathLine()<CR>
map <Leader>cps :call CopyGitPathLineS()<CR>
map <Leader>da <Action>(CloseAllEditors)
map <Leader>de <Action>(CloseAllEditorsButActive)
map <Leader>% <Action>(EditorCodeBlockEnd)
map <Leader><Leader>% <Action>(EditorCodeBlockStart)
map <Leader>rn <Action>(RenameElement)
map <Leader>t <Action>(ActivateStructureToolWindow)
map <Leader>T <Action>(SearchEverywhere)
map [m <Action>(MethodDown)
map ]m <Action>(MethodUp)
map g] <Action>(QuickImplementations)

function! s:MapBookmark(char)
  let l:bookmark = toupper(a:char)
  exec 'map m' . a:char . ' <Action>(ToggleBookmark' . bookmark . ')'
  exec 'map `' . a:char . ' <Action>(GotoBookmark' . bookmark . ')'
  exec "map '" . a:char . ' <Action>(GotoBookmark' . bookmark . ')'
endfunction

for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  call s:MapBookmark(i)
endfor

for c in "abcdefghijklmnopqrstuvwxyz"
  call s:MapBookmark(c)
endfor

function! CopyGitPath()
  exec 'action CopyPathFromRepositoryRootProvider'
endfunction

function! CopyGitPathLine()
  call CopyGitPath()
  let @+ = @+ . ':' . line('.')
endfunction

function! CopyGitPathLineS()
  call CopyGitPathLine()
  let @+ = 's ' . @+
endfunction
