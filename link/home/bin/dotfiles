#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Tries to be as idempotent as possible
# Doesn't handle deletions

function dotfiles::edit() {
  local workspace_file
  workspace_file=$(find "$DOTFILES" -name '*.code-workspace' -maxdepth 1 -print -quit)
  # shellcheck disable=SC1091
  . "$DOTFILES_INCLUDES"/lib/editing.sh
  if [[ $workspace_file ]]; then
    open_with_editor "$workspace_file"
  else
    open_with_editor "$DOTFILES"
  fi
}

function dotfiles::setup() {
  local candidate cmd_path
  for candidate in code-insiders code vim; do
    if cmd_path=$(command -v $candidate); then
      break
    fi
  done

  export EDITOR=$cmd_path
  export BUNDLER_EDITOR=$cmd_path
  export VISUAL='vim' # Needed for `crontab -e` (`code --wait` doesn't work)

  local vars=(
    EDITOR
    BUNDLER_EDITOR
    VISUAL
    DOTFILES
    DOTFILES_SHARED
    DOTFILES_INCLUDES
    DOTFILES_CUSTOM
  )

  local bootstrap='' var
  for var in "${vars[@]}"; do
    bootstrap+="$(declare -p "$var")"$'\n'
  done
  echo_eval 'printf %q > %q/.dotfiles_bootstrap.sh' "$bootstrap" "$HOME_DIR"

  local plug=$HOME_DIR/.vim/autoload/plug.vim plug_installed=true
  if [[ ! -f $plug ]]; then
    echo_eval 'curl -fLo %q --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ' "$plug"
    plug_installed=false
  fi

  dotfiles::sync all $plug_installed

  if [[ $OSTYPE == darwin* && -n "${ZSH_VERSION:-}" ]]; then
    echo_eval 'iterm_tab %q omz_install_custom' "$PWD"
  fi
}

# TODO: Add archive feature: unarchive when the app is installed again
function dotfiles::sync() {
  local type=${1:-all} plug_installed=${2:-true}

  if [[ $type == all || $type == shared ]]; then
    dotfiles::_setup_shared_links
  fi

  if [[ $type == all || $type == custom ]]; then
    dotfiles::_setup_custom_links
  fi

  dotfiles::vim_setup false "$plug_installed"
}

function dotfiles::import() {
  dotfiles::_do_import "$@"
}

function dotfiles::revert_import() {
  REVERT_IMPORT=1 dotfiles::_do_import "$@"
}

function dotfiles::revert_import_and_remove() {
  REVERT_IMPORT=1 REMOVE=1 dotfiles::_do_import "$@"
}

function dotfiles::_do_import() {
  local usage
  usage="$USAGE_BASE ${FUNCNAME[1]} <shared|custom> <path 1> [<path 2> ...]"

  local dotfile_type=${1:-''}
  if ! dotfiles::_validate_type "$dotfile_type" || [[ $# -lt 2 ]]; then
    dotfiles::_log_error "$usage" 1
    return
  fi

  for item_path in "${@:2}"; do
    color >&2 white-bold "---> $item_path"
    dotfiles::_import_path "$dotfile_type" "$item_path"
  done
}

function dotfiles::_import_path() {
  local dotfile_type=$1 item_path=$2 revert_import=${REVERT_IMPORT:-''} remove=${REMOVE:-''}

  if [[ ! $revert_import && ! -e $item_path ]]; then
    dotfiles::_log_error 'Does not exist'
    return
  fi

  local dotfile_dir
  case "$dotfile_type" in
    shared) dotfile_dir=$DOTFILES_SHARED ;;
    custom) dotfile_dir=$DOTFILES_CUSTOM ;;
  esac

  local item_relative_to_home dir_type relative_path
  item_relative_to_home=$(relative_to "$HOME_DIR" "$item_path")
  if [[ $item_relative_to_home == '../'* ]]; then
    dir_type=root
    relative_path=$(relative_to "$ROOT_DIR" "$item_path")
  else
    dir_type=home
    relative_path=$item_relative_to_home
  fi

  local path_in_dotfiles=$dotfile_dir/link/$dir_type/${relative_path#/}

  # Git doesn't allow sym-linked .gitignore files, so we link .git/info/exclude instead
  # But .git is a special name that is always ignored, so we rename it within dotfiles
  # https://stackoverflow.com/q/72729555/25475271
  local is_local_git=false
  if [[ $item_path == .git/* || $item_path == */.git/* ]]; then
    is_local_git=true
    path_in_dotfiles=${path_in_dotfiles//\/.git\//\/.git.linked\/}
  fi

  if [[ $revert_import ]]; then
    if [[ ! -e $path_in_dotfiles ]]; then
      dotfiles::_log_error 'Does not exist in dotfiles'
      return
    fi

    if [[ -e $item_path && ! -L $item_path || $(readlink -f "$item_path") != "$path_in_dotfiles" ]]; then
      dotfiles::_backup "$item_path"
    fi

    if [[ $remove ]]; then
      # TODO: Remove empty directories
      dotfiles::_echo_eval_with_sudo 'rm %q %q' "$path_in_dotfiles" "$item_path"
    else
      dotfiles::_echo_eval_with_sudo 'mv %q %q' "$path_in_dotfiles" "$item_path"
    fi
  else
    local relative_dir=${relative_path%/*}

    if [[ $is_local_git ]]; then
      relative_dir=${relative_dir//\/.git\//\/.git.linked\/}
    fi

    if [[ $relative_dir == "$relative_path" ]]; then
      relative_dir=''
    fi

    dotfiles::_mk_dir "$dotfile_dir/link/$dir_type/$relative_dir"
    dotfiles::_echo_eval_with_sudo 'mv %q %q' "$item_path" "$path_in_dotfiles"

    case "$dotfile_type" in
      shared) dotfiles::_setup_shared_links ;;
      custom) dotfiles::_setup_custom_links ;;
    esac

    if [[ $item_path == $VIM_SPELL/* ]]; then
      dotfiles::vim_setup
    fi
  fi

  return 0
}

function dotfiles::_setup_shared_links() {
  dotfiles::_setup_links "$DOTFILES_SHARED"
}

function dotfiles::_setup_custom_links() {
  if [[ -d "$DOTFILES_CUSTOM" ]]; then
    dotfiles::_setup_links "$DOTFILES_CUSTOM"
  fi
}

function dotfiles::_setup_links() {
  local dir_type
  for dir_type in home root; do
    dotfiles::_start_link_recursive "$1"/link/$dir_type $dir_type
  done
}

function dotfiles::_start_link_recursive() {
  local dir=$1 dir_type=$2
  if [[ ! -d "$dir" ]]; then
    return 0
  fi
  dotfiles::_link_recursive "$dir" "$dir" "$dir_type"
}

function dotfiles::_link_recursive() {
  RECURSION_LEVEL=${RECURSION_LEVEL:-0}
  RECURSION_LEVEL=$((RECURSION_LEVEL + 1))
  if [[ $RECURSION_LEVEL -gt 10 ]]; then
    dotfiles::_log_error 'Too many levels of recursion'
    return
  fi

  local current_source_dir=$1 source_base=$2 dir_type=$3 relative_base target_base target_base_name target_dir
  relative_base=$(relative_to "$source_base" "$current_source_dir")

  if [[ -L "$current_source_dir" ]]; then
    current_source_dir=$(readlink -f "$current_source_dir")
  fi

  case "$relative_base" in
    .) relative_base='' ;;
    */.git.linked*) relative_base=${relative_base/.git.linked/.git} ;;
  esac

  case "$dir_type" in
    home)
      target_base=$HOME_DIR
      target_base_name=$HOME_DIR
      ;;
    root)
      target_base=$ROOT_DIR
      target_base_name=${ROOT_DIR%/}
      ;;
    *)
      dotfiles::_log_error "Unknown link type: $dir_type"
      return
      ;;
  esac

  target_dir=$target_base
  if [[ $relative_base ]]; then
    target_dir=$target_base_name/$relative_base
  fi

  if [[ $current_source_dir != "$source_base" ]]; then
    dotfiles::_mk_dir "$target_dir"
  fi

  local dir_source
  # shellcheck disable=SC2044
  for dir_source in $(dotfiles::_find_immediate_children "$current_source_dir" d); do
    RECURSION_LEVEL=$RECURSION_LEVEL dotfiles::_link_recursive "$dir_source" "$source_base" "$dir_type"
  done

  local file_source
  # shellcheck disable=SC2044
  for file_source in $(dotfiles::_find_immediate_children "$current_source_dir" f); do
    dotfiles::_link_file "$file_source" "$target_dir"
  done

  local link_source
  # shellcheck disable=SC2044
  for link_source in $(dotfiles::_find_immediate_children "$current_source_dir" l); do
    if [[ -d $(readlink -f "$link_source") ]]; then
      RECURSION_LEVEL=$RECURSION_LEVEL dotfiles::_link_recursive "$link_source" "$source_base" "$dir_type"
    else
      dotfiles::_link_file "$link_source" "$target_dir"
    fi
  done
}

function dotfiles::_mk_dir() {
  local dir=$1
  if [[ -d "$dir" || $dir == "$ROOT_DIR" || $dir == "$HOME_DIR" ]]; then
    return 0
  fi

  if [[ -L "$dir" || -f "$dir" ]]; then
    dotfiles::_backup "$dir"
  fi

  dotfiles::_echo_eval_with_sudo 'mkdir -p %q' "$dir"
}

function dotfiles::_find_immediate_children() {
  local dir=$1 find_type=$2
  find "$dir" -mindepth 1 -maxdepth 1 -type "$find_type"
}

function dotfiles::_link_file() {
  local source=$1 target_dir=$2 source_base
  source_base=$(basename "$source")

  if [[ $source_base == '.DS_Store' ]]; then
    return 0
  fi

  # TODO: Remove hardlink-ing, it's unreliable. Backup instead
  # TODO: Move iTerm2 config to default location
  # macOS no longer accepts symlinks to plist files https://github.com/lra/mackup/issues/1924
  # So for now, we use hard links. Note that they are prone to being replaced by actual files.
  local hard_link=false
  if [[ $source == *.plist ]]; then
    hard_link=true
  fi

  local target=$target_dir/$source_base

  if ! dotfiles::_need_to_link "$source" "$target" "$hard_link"; then
    return 0
  fi

  dotfiles::_backup "$target" "$hard_link" "$source"

  local link_arg=' -s' comment=''
  if [[ $hard_link == true ]]; then
    link_arg=' -f'
    comment=' # Hard link'
  fi

  dotfiles::_echo_eval_with_sudo 'ln%s %q %q%s' "$link_arg" "$source" "$target" "$comment"
}

function dotfiles::_need_to_link() {
  local source=$1 target=$2 hard_link=$3

  if [[ ! -e $target ]]; then
    return 0
  fi

  if [[ $hard_link == false ]]; then
    [[ $(readlink -f "$target") != $(readlink -f "$source") ]]
  else
    if same_inode "$target" "$source"; then
      return 1
    fi
  fi
}

function dotfiles::_validate_type() {
  local type=$1
  if [[ $type != custom && $type != shared ]]; then
    local msg='Unknown dotfile type'
    if [[ $type ]]; then
      msg+=": $type"
    fi
    dotfiles::_log_error "$msg"
  fi
}

function dotfiles::_backup() {
  local target=$1 hard_link=${2:-false} source=${3:-}

  if [[ ! -L "$target" && ! -f "$target" && ! -d "$target" || $target == "$ROOT_DIR" || $target == "$HOME_DIR" ]]; then
    return 0
  fi

  if [[ -L "$target" && ! -e "$target" ]]; then
    dotfiles::_echo_eval_with_sudo 'rm %q # Broken link' "$target"
    return
  fi

  if [[ $hard_link == true ]]; then
    if [[ $source ]]; then
      dotfiles::_echo_eval_with_sudo 'cp -f %q %q' "$target" "$source"
    fi
  else
    dotfiles::_echo_eval_with_sudo 'mv %q{,.bak.%q}' "$target" "$(date +'%s')"
  fi
}

function dotfiles::_echo_eval_with_sudo() {
  local cmd=("$@")
  # TODO: Add sudo when it fails due to permissions
  # NOTE: If this gets migrated to Zsh, change 0 to 1
  # if fails with "...": cmd[0]="sudo ${cmd[0]}" & echo_eval ...
  echo_eval "${cmd[@]}"
}

function dotfiles::vim_setup() {
  if ! command -v "$VIM_CMD" &> /dev/null || [[ ${NO_VIM:-} || ! -d "$VIM_SPELL" ]]; then
    return 0
  fi

  local force=${1:-false} plug_installed=${2:-true} vim_cmds=()

  if [[ $plug_installed == false ]]; then
    vim_cmds+=('PlugInstall')
  fi

  local file files=()
  for file in "$VIM_SPELL"/*.add; do
    if [[ $force == true || ! $(find "$VIM_SPELL" -name "$(basename "$file")*.spl" -print -quit) ]]; then
      vim_cmds+=("mkspell! %q")
      files+=("$file")
    fi
  done

  if [[ ${#vim_cmds[@]} -eq 0 ]]; then
    echo >&2 'No Vim commands to run'
    return 0
  fi

  vim_cmds+=('q')
  echo_eval "vim +'$(join_array ' | ' "${vim_cmds[@]}")'" "${files[@]}"
}

function dotfiles::_log_error {
  local msg=$1 no_color=${2:-''}
  if [[ $no_color ]]; then
    echo >&2 "$msg"
  else
    color red "$msg" >&2
  fi
  return 1
}

# Allow customization and testing
HOME_DIR=${HOME_DIR:-$HOME}
ROOT_DIR=${ROOT_DIR:-'/'}

export DOTFILES_CMD
DOTFILES_CMD=$(basename "$0")

export VIM_SPELL=$HOME_DIR/.vim/spell

export DOTFILES
DOTFILES="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "$(realpath "$0")")")")")")"
export DOTFILES_SHARED=$DOTFILES/shared
export DOTFILES_INCLUDES=$DOTFILES_SHARED/includes
export DOTFILES_CUSTOM=$DOTFILES/custom

# shellcheck disable=SC1091
. "$DOTFILES_INCLUDES"/lib/functions.sh
# shellcheck disable=SC1091
. "$DOTFILES_INCLUDES"/env.sh

USAGE_BASE="Usage: $(color green "$DOTFILES_CMD")"

# TODO: Add rm command: removes both the file and the symlink
case "${1:-''}" in
  edit) dotfiles::edit ;;
  setup) dotfiles::setup ;;
  sync) dotfiles::sync "${2:-}" ;;
  import) dotfiles::import "${@:2}" ;;
  revert_import) dotfiles::revert_import "${@:2}" ;;
  revert_import_and_remove) dotfiles::revert_import_and_remove "${@:2}" ;;
  vim_setup) dotfiles::vim_setup true ;;
  *) dotfiles::_log_error "$USAGE_BASE <setup|sync|import|revert_import|revert_import_and_remove|vim_setup> ..." 1 ;;
esac
