#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# shellcheck disable=SC1091
. "$HOME"/.dotfiles_bootstrap.sh
# shellcheck disable=SC1091
. "$DOTFILES_INCLUDES"/bash_shared.sh

# https://www.nerdfonts.com/cheat-sheet
readonly BRIDGE_ICON=󰘘
readonly ETHERNET_ICON=󰈀
readonly ETHERNET_IP_ICON=󱂇
readonly WIFI_ICON=
readonly WIFI_IP_ICON=󰑩
readonly ROUTER_ICON=󱇢
readonly EXTERNAL_ICON=
readonly ARROW_ICON=

export ROUTED_DEVICE
ROUTED_DEVICE=$(route get 1.1.1.1 | rg -oU 'interface:\s*(\S+)' -r '$1')

function get_external_ip() {
  local ip=$1
  # TODO: might cache proxies, see my_external_ip
  dig @ns1.google.com TXT o-o.myaddr.l.google.com +short -b "$ip" | tr -d '"'
}

function get_info() {
  local info=$1 label=$2 value
  value=$(echo "$info" | rg --multiline --only-matching "^$label: (\S+)" -r '$1')
  if [[ $value == 'none' ]]; then
    echo ''
  else
    echo "$value"
  fi
}

function print_header() {
  local icon=$1 name=$2 device=$3 header_color

  if [[ $device == "$ROUTED_DEVICE" ]]; then
    header_color='green-bold'
  else
    header_color='white-bold'
  fi

  color $header_color "$icon  $name ($device)"
}

function print_icon() {
  local icon=$1
  color white-bold "$icon"
}

function print_ip() {
  local icon=$1 ip=$2
  if [[ ! $ip ]]; then
    return 0
  fi

  printf ' %s  %s %s' "$ARROW_ICON" "$(print_icon "$icon")" "$ip"
}

function print_ip_line() {
  local ip_icon=$1 ip=$2 info=$3 router_label=$4
  if [[ ! $ip ]]; then
    return 0
  fi

  printf '%s %s' "$(print_icon "$ip_icon")" "$ip"

  local router_ip external_ip
  router_ip=$(get_info "$info" "$router_label")
  if [[ $router_ip ]]; then
    print_ip "$ROUTER_ICON" "$router_ip"
    external_ip=$(get_external_ip "$ip")
    print_ip "$EXTERNAL_ICON" "$external_ip"
  fi

  printf '\n'
}

function print_network() {
  local device=$1 name=$2 info ipv4 ipv6
  info=$(networksetup -getinfo "$name")
  ipv4=$(get_info "$info" "IP address")
  ipv6=$(get_info "$info" "IPv6 IP address")

  if [[ ! $ipv4 && ! $ipv6 ]]; then
    return 0
  fi

  local icon ip_icon

  case $name in
    *Bridge*) icon=$BRIDGE_ICON ip_icon=$ETHERNET_IP_ICON ;;
    *\ LAN | *\ ethernet) icon=$ETHERNET_ICON ip_icon=$ETHERNET_IP_ICON ;;
    *Wi-Fi*) icon=$WIFI_ICON ip_icon=$WIFI_IP_ICON ;;
  esac

  print_header $icon "$name" "$device"
  print_ip_line $ip_icon "$ipv4" "$info" 'Router'
  print_ip_line $ip_icon "$ipv6" "$info" 'IPv6 Router'
}

# From network_switcher
networks=$(networksetup -listnetworkserviceorder | tail -n +2)
# Loop over networks instead of ifconfig lines to get the correct order (i.e. the active network first)
while [ "$networks" != '' ]; do
  networks="${networks#*\(}"  # '*) Service 1\n...'
  number=${networks%%\)*}     # '*'
  networks="${networks#*\) }" # 'Service 1\n...'
  name=${networks%%$'\n'*}    # 'Service 1'

  networks="${networks#*$'\n'*Device: }" # 'en0)\n...'
  device=${networks%%\)*}                # 'en0'
  networks="${networks#*\)}"             # '' (tail call for the final network, since there's no \n\n anymore)
  networks="${networks#*$'\n\n'}"        # '(2) Service 2\n...'

  [[ $number == '*' || ! $device ]] && continue

  print_network "$device" "$name"
done
